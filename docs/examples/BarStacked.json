{"pages":[{"title":"main.js","contents":"import { default as LayerCake, flatten } from 'layercake';\nimport { stack } from 'd3-shape';\nimport { scaleBand } from 'd3-scale';\nimport fruit from '../../data/fruitOrdinal.js';\nimport BarStacked from '../BarStacked.html';\nimport AxisX from '../AxisX.html';\nimport AxisY from '../AxisYScaleBand.html';\n\nconst seriesNames = Object.keys(fruit[0]).filter(d => d !== 'year');\n\nconst stackData = stack()\n  .keys(seriesNames);\n\nconst series = stackData(fruit);\n\nfunction formatXTick (d) {\n  const parts = String(d).split('.');\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n  return parts.join('.');\n}\n\nconst myCake = new LayerCake({\n  padding: { top: 0, right: 0, bottom: 20, left: 30 },\n  y: d => d.data.year,\n  x: [0, 1],\n  yScale: scaleBand().paddingInner([0.05]).round(true),\n  yDomain: ['2016', '2017', '2018', '2019'],\n  flatten,\n  data: series,\n  target: document.getElementById('my-chart')\n})\n  .svgLayers([\n    { component: AxisX, opts: { formatTick: formatXTick, baseline: true } },\n    { component: AxisY, opts: { gridlines: false } },\n    { component: BarStacked, opts: {} }\n  ]);\n\nmyCake.render();"},{"title":"BarStacked.html","contents":"{#each $data as series, i}\n  {#each series as d}\n    <rect class='group-rect' data-id=\"{i}\" x=\"{x(d)[0]}\" y=\"{y(d)}\" {height} width=\"{width(d)}\"fill={fill(i)}></rect>\n  {/each}\n  }\n{/each}\n\n<script>\nexport default {\n  namespace: 'svg',\n  data () {\n    // TODO, make an actual scale\n    const colors = ['#0fd3bb','#f77ff4','#8a93ed', '#f7848a'];\n    return {\n      fill: i => colors[i]\n    };\n  },\n  computed: {\n    x: ({ $xGet }) => {\n      return (d) => {\n        return $xGet(d);\n      };\n    },\n    y: ({ $yGet }) => {\n      return (d) => {\n        return $yGet(d);\n      };\n    },\n    height: ({ $yScale }) => {\n      return $yScale.bandwidth();\n    },\n    width: ({ x }) => {\n      return (d) => {\n        const vals = x(d);\n        return vals[1] - vals[0];\n      };\n    }\n  }\n};\n</script>"},{"title":"AxisX.html","contents":"<g class='axis x-axis'>\n  {#each ticks as tick, i}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if opts.gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text y='16' text-anchor='{i === 0 ? 'start' : i === ticks.length - 1 ? 'end' : 'middle'}'>{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n  {#if opts.baseline === true}\n    <line class=\"baseline\" y1='{$height - 0.5}' y2='{$height - 0.5}' x1='0' x2='{$width - 1}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg',\n  computed: {\n    ticks: ({ $xScale, opts }) => {\n      return $xScale.ticks(opts.tickNumber);\n    }\n  }\n};\n</script>"},{"title":"AxisYScaleBand.html","contents":"<g class='axis y-axis'>\n  {#each $yScale.domain() as tick}\n    <g class='tick tick-{ tick }' transform='translate({$xScale.range()[0]}, {$yScale(tick)})'>\n      {#if opts.gridlines !== false}\n        <line y1='{$width * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text y='{4 + ($yScale.bandwidth() / 2)}' x=\"-5\">{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n\n  .y-axis .tick text {\n    text-anchor: end;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg'\n};\n</script>"},{"title":"data/fruitOrdinal.js","contents":"/* --------------------------------------------\n *\n * Example data for stacked charts\n * from D3 documentation\n * Adapted from https://github.com/d3/d3-shape/blob/master/README.md#stack\n *\n * --------------------------------------------\n */\nexport default [\n  {year: '2019', apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {year: '2018', apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {year: '2017', apples: 640, bananas: 960, cherries: 640, dates: 400},\n  {year: '2016', apples: 320, bananas: 480, cherries: 640, dates: 400}\n];"}],"dek":""}