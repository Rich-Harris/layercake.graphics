{"pages":[{"title":"main.js","contents":"import { default as LayerCake, flatten } from 'layercake';\nimport { stack } from 'd3-shape';\nimport fruit from '../../data/fruit.js';\nimport AreaStacked from '../AreaStacked.html';\nimport AxisX from '../AxisX.html';\nimport AxisY from '../AxisY.html';\n\nconst seriesNames = Object.keys(fruit[0]).filter(d => d !== 'month');\n\nconst stackData = stack()\n  .keys(seriesNames);\n\nconst series = stackData(fruit);\nconst monthNames = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sep.', 'Oct.', 'Nov.', 'Dec.'];\n\nfunction formatXTick (d) {\n  const date = new Date(d);\n  return `${monthNames[date.getMonth()]} ${date.getDate()}`;\n}\n\nfunction formatYTick (d) {\n  if (d > 999) {\n    return Math.round(d / 1000) + 'k';\n  }\n  return d;\n}\n\nconst myCake = new LayerCake({\n  padding: { top: 0, right: 0, bottom: 20, left: 17 },\n  x: d => d.data.month,\n  y: [0, 1],\n  flatten,\n  data: series,\n  target: document.getElementById('my-chart')\n})\n  .svgLayers([\n    { component: AxisX, opts: { formatTick: formatXTick, tickNumber: 3 } },\n    { component: AxisY, opts: { formatTick: formatYTick } },\n    { component: AreaStacked, opts: {} }\n  ]);\n\nmyCake.render();"},{"title":"AreaStacked.html","contents":"{#each $data as d, i}\n  <path class='path-area' d='{drawArea(d)}' fill=\"{fill(i)}\"></path>\n{/each}\n\n<script>\nimport { area } from 'd3-shape';\n\nexport default {\n  namespace: 'svg',\n  data () {\n    // TODO, make an actual scale\n    const colors = ['#ff00cc', '#ff7ac7', '#ffb3c0', '#ffe4b8'];\n    return {\n      fill: i => colors[i]\n    };\n  },\n  computed: {\n    area: ({ $xScale, $yScale }) => {\n      return area()\n        .x(d => $xScale(d.data.month))\n        .y0(d => $yScale(d[0]))\n        .y1(d => $yScale(d[1]));\n    },\n    drawArea: ({ area }) => {\n      return d => area(d);\n    }\n  }\n};\n</script>"},{"title":"AxisX.html","contents":"<g class='axis x-axis'>\n  {#each ticks as tick, i}\n    <g class='tick tick-{ tick }' transform='translate({$xScale(tick)},{$yScale.range()[0]})'>\n      {#if opts.gridlines !== false}\n        <line y1='{$height * -1}' y2='0' x1='0' x2='0'></line>\n      {/if}\n      <text y='16' text-anchor='{i === 0 ? 'start' : i === ticks.length - 1 ? 'end' : 'middle'}'>{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n  {#if opts.baseline === true}\n    <line class=\"baseline\" y1='{$height - 0.5}' y2='{$height - 0.5}' x1='0' x2='{$width - 1}'></line>\n  {/if}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  line,\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n  }\n\n  .baseline {\n    stroke-dasharray: 0;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg',\n  computed: {\n    ticks: ({ $xScale, opts }) => {\n      return $xScale.ticks(opts.tickNumber);\n    }\n  }\n};\n</script>"},{"title":"AxisY.html","contents":"<g class='axis y-axis' transform='translate(-{$padding.left}, 0)'>\n  {#each $yScale.ticks(opts.tickNumber || 5) as tick, i}\n    <g class='tick tick-{tick}' transform='translate(0, {$yScale(tick)})'>\n      {#if opts.gridlines !== false}\n        <line x2='100%'></line>\n      {/if}\n      <text y='-4'>{opts.formatTick ? opts.formatTick(tick) : tick}</text>\n    </g>\n  {/each}\n</g>\n\n<style>\n  .tick {\n    font-size: .725em;\n    font-weight: 200;\n  }\n\n  .tick line {\n    stroke: #aaa;\n    stroke-dasharray: 2;\n  }\n\n  .tick text {\n    fill: #666;\n    text-anchor: start;\n  }\n\n  .tick.tick-0 line {\n    stroke-dasharray: 0;\n  }\n</style>\n\n<script>\nexport default {\n  namespace: 'svg'\n};\n</script>"},{"title":"data/fruit.js","contents":"/* --------------------------------------------\n *\n * Example data for stacked charts\n * from D3 documentation\n * Adapted from https://github.com/d3/d3-shape/blob/master/README.md#stack\n *\n * --------------------------------------------\n */\nexport default [\n  {month: new Date(2015, 3, 1), apples: 3840, bananas: 1920, cherries: 960, dates: 400},\n  {month: new Date(2015, 2, 1), apples: 1600, bananas: 1440, cherries: 960, dates: 400},\n  {month: new Date(2015, 1, 1), apples: 640, bananas: 960, cherries: 640, dates: 400},\n  {month: new Date(2015, 0, 1), apples: 320, bananas: 480, cherries: 640, dates: 400}\n];"}],"dek":""}